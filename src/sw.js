/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL, cleanupOutdatedCaches } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

import Axios from 'axios';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA

precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell


const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
/*
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images-png',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 })
    ],
  })
);
*/

registerRoute(
  ({url}) => url.pathname.endsWith('.jpg'),
  new StaleWhileRevalidate({
    cacheName: 'images-jpg',
    plugins: [
      new ExpirationPlugin({ maxEntries: 20 })
    ]
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});


const cacheStatic = "static-v-1.1";
const cacheDynamic = "dynamic-v-1.2";
const cacheInmutable = "inmutable-v-1.3";

// Any other custom service worker logic can go here.

self.addEventListener("install", (e) => {
  console.log(e);
	const cacheStaticPromise = caches.open(cacheStatic).then((cache) => {
		return cache.addAll([
			"/service-worker.js",
			"/favicon.ico",
			"/manifest.json",
			"/logo192.png"
		]);
	});

	const cacheInmutablePromise = caches.open(cacheInmutable).then((cache) => {
		return cache.addAll([
			"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap",
      "https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css",
      "https://unpkg.com/react/umd/react.production.min.js",
      "https://unpkg.com/react-dom/umd/react-dom.production.min.js",
      "https://unpkg.com/react-bootstrap@next/dist/react-bootstrap.min.js"
    ]);
	});

	e.waitUntil(Promise.all([cacheInmutablePromise, cacheStaticPromise]));
});


self.addEventListener('periodicsync', (e) => {
  if (e.tag === 'hola') {
    console.log('Fetching news in the background');
    e.waitUntil(fetchToDB);
  };
});


self.addEventListener('sync', (e) => {
  if (e.tag == 'myFirstSync') {
    e.waitUntil(fetchToDB);
  }
});


async function fetchToDB() {
  try {
    let allsAlarms = await Axios.get('http://localhost:4000/alarm/');

    localStorage.setItem('ObjectAlarms', JSON.stringify(allsAlarms.data));

    console.log(allsAlarms.data);
  } catch (e) {
    console.log("Your connection to the Database is wrong, the data on screen is painted by LocalStorage.", e);
  };
};
